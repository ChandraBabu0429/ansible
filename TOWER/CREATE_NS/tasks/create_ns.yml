- name: Print The Cluster Name,Environment and URL Address
  ansible.builtin.debug:
    msg: "URL: {{ hostvars[item].url }} Cluster Name: {{ item }}"
  with_items:
      - "{{ groups[ env ] }}"

- name: Check The Name Space If Exist Or Does Not
  ansible.builtin.uri:
    url: "{{ hostvars[item].url }}/api/v1/namespaces/test-tower"
    method: GET
    body_format: json
    validate_certs: no
    headers:
      Accept: "application/json"
      Authorization: "Bearer {{ hostvars[item].token }}"
    status_code: 200, 404
  with_items:
    - "{{ groups[ env ] }}"
  register: result_of_ns

- name: PRINT NS Status
  ansible.builtin.debug:
    var: result_of_ns.results[{{ my_idx }}].status
  with_items:
    - "{{ groups[ env ] }}"
  loop_control:
    index_var: my_idx

- name: EXIT The Script If NameSpace Exist
  fail: msg="Please Ensure The Your NameSpace Exist In The Your Environment"
  with_items:
    - "{{ groups[ env ] }}"
  loop_control:
    index_var: my_idx
  when: result_of_ns.results[{{ my_idx }}].status != 404

- name: Create NS If Does Not Exist
  ansible.builtin.uri:
    url: "{{ hostvars[item].url }}/api/v1/namespaces"
    method: POST
    validate_certs: no
    headers:
      Content-Type: application/yaml
      Authorization: "Bearer {{ hostvars[item].token }}"
    body: "{{ lookup('ansible.builtin.file','./files/ns.yml') }}"
    status_code: 201, 409
  with_items:
    - "{{ groups[ env ] }}"
  loop_control:
    index_var: my_idx
  register: result_of_ns_create

- name: Get NameSpace List With Api Call
  ansible.builtin.uri:
    url: "{{ hostvars[item].url }}/api/v1/namespaces/"
    method: GET
    body_format: json
    status_code: [200, 202]
    validate_certs: no
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: "Bearer {{ hostvars[item].token }}"
  register: get_namespace
  with_items:
    - "{{ groups[ env ] }}"

- name: Print The NameSpace List
  ansible.builtin.debug:
    var: get_namespace
